from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from database.models import SessionLocal, Category, Subcategory
from sqlalchemy import select

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def user_main_menu():
    buttons = [
        [InlineKeyboardButton("–ö–∞—Ç–∞–ª–æ–≥ üì¶", callback_data="catalog")],
        [InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã ‚òéÔ∏è", url="https://t.me/CityGadgets_TopCase")]
    ]
    return InlineKeyboardMarkup(buttons)

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∫–Ω–æ–ø–∫–æ–π "–ö–æ–Ω—Ç–∞–∫—Ç—ã ‚òéÔ∏è"
async def categories_keyboard():
    async with SessionLocal() as db:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        categories_result = await db.execute(select(Category))
        categories = categories_result.scalars().all()

    buttons = []

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –¥–≤–µ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
    for i in range(0, len(categories), 2):
        row = []
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –∫–Ω–æ–ø–∫—É –≤ —Å—Ç—Ä–æ–∫—É
        if i < len(categories):
            row.append(InlineKeyboardButton(categories[i].name, callback_data=f"category_{categories[i].id}"))
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫—É –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if i + 1 < len(categories):
            row.append(InlineKeyboardButton(categories[i + 1].name, callback_data=f"category_{categories[i + 1].id}"))
        buttons.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–ö–æ–Ω—Ç–∞–∫—Ç—ã" –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
    buttons.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
        InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã ‚òéÔ∏è", url="https://t.me/CityGadgets_TopCase")
    ])

    return InlineKeyboardMarkup(buttons)

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∫–Ω–æ–ø–∫–æ–π "–ö–æ–Ω—Ç–∞–∫—Ç—ã ‚òéÔ∏è"
async def subcategories_keyboard(category_id: int):
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ category_id"""
    async with SessionLocal() as db:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        subcategories_result = await db.execute(
            select(Subcategory).where(Subcategory.category_id == category_id)
        )
        subcategories = subcategories_result.scalars().all()

    buttons = []

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –¥–≤–µ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
    for i in range(0, len(subcategories), 2):
        row = []
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –∫–Ω–æ–ø–∫—É –≤ —Å—Ç—Ä–æ–∫—É
        if i < len(subcategories):
            row.append(InlineKeyboardButton(subcategories[i].name, callback_data=f"subcategory_{subcategories[i].id}"))
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫—É –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if i + 1 < len(subcategories):
            row.append(InlineKeyboardButton(subcategories[i + 1].name, callback_data=f"subcategory_{subcategories[i + 1].id}"))
        buttons.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–ö–æ–Ω—Ç–∞–∫—Ç—ã" –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
    buttons.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="catalog"),
        InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã ‚òéÔ∏è", url="https://t.me/CityGadgets_TopCase")
    ])

    return InlineKeyboardMarkup(buttons)

# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" —Å "–ö–æ–Ω—Ç–∞–∫—Ç—ã ‚òéÔ∏è"
def back_button():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")],
        [InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã ‚òéÔ∏è", url="https://t.me/CityGadgets_TopCase")]
    ])